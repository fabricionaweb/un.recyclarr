<?php

class Settings {
  public $schedule;
  public $custom;
  public $files;

  private static $heading = "# Generated by un.recyclarr";

  function __construct() {
    [$this->schedule, $this->custom] = self::getSchedule();
    $this->files = self::getConfigFiles();
  }

  private static function getSchedule() {
    // Read the cron file and extract the expression using regex
    preg_match(Plugin::CRON_REGEX, @file_get_contents(Plugin::CRON_FILE), $matches);

    // The expression
    $value = trim($matches[1]);
    // The enum
    $key   = Schedule::reflection($value);

    return [$key, $value];
  }

  // Return list of files inside configs folder
  private static function getConfigFiles() {
    return preg_grep("/\.yml$/", scandir(Plugin::CONFIGS_DIR));
  }

  // You must validate $expression before call the method
  public static function saveSchedule($expression) {
    $fileContents = "";

    if ($expression) {
      $fileContents .= self::$heading.PHP_EOL;
      $fileContents .= $expression." ".Plugin::CRON_COMMAND.PHP_EOL;
    }

    // Override the cron file
    file_put_contents(Plugin::CRON_FILE, $fileContents.PHP_EOL);

    // Reload to /etc/cron.d/root file
    exec("/usr/local/sbin/update_cron");
  }

  // You must validate $fileName before call the method
  public static function createConfigFile($fileName) {
    return file_put_contents(Plugin::CONFIGS_DIR."/$fileName", self::$heading.PHP_EOL);
  }

  // You must validate $fileName before call the method
  public static function getConfigContents($fileName) {
    return @file_get_contents(Plugin::CONFIGS_DIR."/$fileName");
  }
}
