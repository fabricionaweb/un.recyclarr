#!/bin/bash -e

# Set $TERM variable to parse console logs
TERM=xterm
# Default appdata folder
APPDATA=/root/.config/recyclarr
# Our custom log file
LOGFILE="recyclarr_$(date +%F).log"
# First argument. Expects "version" or "nchan"
ARG1="$1"
# Second argument. Expect "config file" or "-p" or "-d"
ARG2="$2"
# Third argument. Expect "-p" or "-d" if $2 exists
ARG3="$3"
# Fourth argument. Expect "-d" if $3 exists
ARG4="$4"

# Print the version and die
if [[ "$ARG1" == "version" ]]; then
  /usr/local/bin/recyclarr --version
  exit $?
fi

# Make recyclarr sync argument
if [[ -n "$ARG2" && "$ARG2" != "-p" && "$ARG2" != "-d" ]]; then
  # Filter argument extensions and path
  configFile=$(basename ${ARG2%.*})
  options="-c $APPDATA/configs/$configFile.yml"
fi

# Make recyclarr dry run (preview) argument
if [[ "$ARG2" == "-p" || "$ARG3" == "-p" ]]; then
  preview="-p"
fi

# Make recyclarr debug argument
if [[ "$ARG2" == "-d" || "$ARG3" == "-d" || "$ARG4" == "-d" ]]; then
  debug="-d"
fi

# Publish messages to nchan sub
publish() {
  # Filter preview and debug from syslog - too much info
  if [[ -z "$preview" && -z "$debug" ]]; then
    logger -t recyclarr "$1"
    echo "[$(date +%T)] $1" >>"$APPDATA/logs/cli/$LOGFILE"
  fi

  # Publish to frontend if the argument is nchan
  if [[ "$ARG1" == "nchan" ]]; then
    curl -H "Content-Type: text/plain" -X POST --data "$1" \
      --unix-socket /var/run/nginx.socket \
      "http://localhost/pub/recyclarr?buffer_length=1"
  fi
}

# Create temporary file to hold output
FIFO=$(mktemp -u)
mkfifo $FIFO

# Run the program async and write output lines in that file
/usr/local/bin/recyclarr sync $options $preview $debug 2>&1 >$FIFO &

# Listen output and publish messages
while read LINE; do publish "$LINE"; done <$FIFO

# Wait program ends and send last message
wait
publish "[DONE]"
rm $FIFO
